compound_statement  : variable_declaration_list statement_list {printf("compoundstatement\n");}
                    ;

variable_declaration_list   : variable_declaration_list variable_declaration
                            | /*NULL*/
                            ;

variable_declaration: type_specifier IDENTIFIER
                    ;

type_specifier  : arithmetic_type
                | VOID
                ;

arithmetic_type : PRICE
                ;

statement_list  : statement_list statement
                | /*NULL*/
                ;

statement       :set_statement
                ;

set_statement   : SET '{' argument_expression_list '}' IF ':' '{' expression '}'
                | SET '{' argument_expression_list '}'
                ;

argument_expression_list: unary_expression '=' logical_OR_expression
                        ;

unary_expression: postfix_expression
                ;

postfix_expression  : primary_expression
                    ;

primary_expression  : IDENTIFIER
                    ;

logical_OR_expression   : logical_AND_expression
                        ;

logical_AND_expression  : equality_expression
                        ;

equality_expression : relation_expression
                    ;

relation_expression : additive_expression
                    ;

additive_expression : multiplicative_expression;
                    ;

multiplicative_expression   : unary_expression
                            ;

expression  : assignment_expression
            | expression ',' assignment_expression
            ;

assignment_expression   : logical_OR_expression
                        | unary_expression '=' logical_OR_expression
                        ;


